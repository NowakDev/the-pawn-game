{"version":3,"sources":["containers/PlayerSelect.js","components/YouLoose.js","components/MoveToEleven.js","containers/Board.js","components/Dice.js","containers/Winner.js","components/SnackBar.js","Game.js","App.js","index.js"],"names":["PlayerSelect","state","pawns","players","pawnSelectHandler","pawnColor","setState","number","position","rolledMeshes","find","pawn","onClickHandler","props","gameStart","this","length","style","textAlign","className","map","key","onClick","src","alt","player","React","Component","YouLoose","MoveToEleven","Board","squares","grid_size","row","col","i","square","push","playersPositions","index","gridRow","gridColumn","Dice","rolledNumber","Winner","winner","averageOfMeshes","reduce","prevVal","curVal","toFixed","SnackBar","innerText","open","color","handleClose","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","SnackbarContent","backgroundColor","message","Game","gameStarted","currentPlayer","Math","ceil","random","isWinner","snackbar","rollTheDice","updatedPosition","setTimeout","secondPlayer","some","closeSnackBar","playAgain","disabled","marginBottom","App","document","body","clientWidth","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.4487c3b8.chunk.js","sourcesContent":["import React from 'react'\n\nclass PlayerSelect extends React.Component {\n  state = {\n    pawns: ['red', 'blue'],\n    players: []\n  }\n\n  pawnSelectHandler = (pawnColor) => {\n    this.setState({\n      players: [\n        {\n          number: 1,\n          pawnColor,\n          position: 0,\n          rolledMeshes: []\n\n        },\n        {\n          number: 2,\n          pawnColor: this.state.pawns.find(pawn => pawn !== pawnColor),\n          position: 0,\n          rolledMeshes: []\n        }\n      ]\n    })\n  }\n\n  onClickHandler = () => {\n    this.props.gameStart(this.state.players)\n  }\n\n  render() {\n    const { pawns, players } = this.state\n\n    return (\n      players.length === 0 ?\n        <div>\n          <h1 style={{ textAlign: 'center' }}>\n            Please, select a pawn to begin:\n          </h1>\n          <div className='pawns-box'>\n            {\n              pawns.map(pawn => (\n                <div\n                  key={pawn}\n                  className='pawn'\n                  onClick={() => this.pawnSelectHandler(pawn)}\n                >\n                  <img\n                    className=\"pawn\"\n                    src={`./pawns/${pawn}-pawn.png`}\n                    alt={`${pawn}-pawn`}\n                  />\n                </div>\n              ))\n            }\n          </div>\n        </div>\n        :\n        <div style={{ textAlign: 'center' }}>\n          <div>\n            <h2>Press play to start the game.</h2>\n            <h2>Player 1 starts. Hit Roll button to move forward.</h2>\n            <h2>Players change after every roll.</h2>\n            <h2>First player who reach the last tile wins.</h2>\n            <h2>If player stop at tile twelve, he looses.</h2>\n            <h2>If player stop at tile nineteen, moves back to tile eleven.</h2>\n            <h1>Have fun !</h1>\n          </div>\n          <div className='pawns-box'>\n            {\n              players.map(player => (\n                < h1\n                  key={player.number}\n                  className='pawns-box'\n                >\n                  Player {player.number}:\n                <img\n                    src={`./pawns/${player.pawnColor}-pawn.png`}\n                    alt={`${player.pawnColor}-pawn`}\n                  />\n                </h1>\n              ))\n            }\n          </div>\n          <button\n            className='start-button'\n            onClick={this.onClickHandler}\n          >\n            Play!\n          </button>\n        </div >\n    )\n  }\n}\n\nexport default PlayerSelect\n","import React from 'react'\n\nconst YouLoose = props => {\n  return (\n    <div\n      className='you-loose'\n    >\n      You loose !\n    </div>\n  )\n}\n\nexport default YouLoose\n","import React from 'react'\n\nconst MoveToEleven = props => {\n  return (\n    <div\n      className='move-to-eleven'\n    >\n      Move to eleven !\n    </div>\n  )\n}\n\nexport default MoveToEleven\n","import React from 'react'\n\nimport YouLoose from '../components/YouLoose'\nimport MoveToEleven from '../components/MoveToEleven'\n\nclass Board extends React.Component {\n\n  state = {\n    squares: [],\n    players: [],\n    grid_size: 6\n  }\n\n  componentDidMount() {\n\n    const { grid_size } = this.state\n\n    const squares = [\n      {\n        row: 1,\n        col: 1,\n        number: 'start'\n      }\n    ]\n\n    let row = 1\n    let col = 2\n\n    for (let i = 1; i < 20; i++) {\n\n      const square = {\n        row,\n        col,\n        number: i\n      }\n\n      if (i < grid_size - 1) {\n        col++\n      } else if (i < 2 * grid_size - 2) {\n        row++\n      } else if (i < 3 * grid_size - 3) {\n        col--\n      } else {\n        row--\n      }\n\n      squares.push(square)\n    }\n    this.setState({\n      squares\n    })\n  }\n\n  render() {\n\n    const { squares } = this.state\n    const { players } = this.props\n    const playersPositions = squares.length > 0 ?\n      players.map(player => squares[player.position % squares.length])\n      :\n      []\n\n    return (\n      <div>\n        <div\n          className=\"gameBoard\"\n        >\n          {\n            squares.map((square, index) => (\n              index === 12 ?\n                <YouLoose key={index} />\n                :\n                index === 19 ?\n                  <MoveToEleven key={index} />\n                  :\n                  <div\n                    className='square'\n                    key={index}\n                    style={{\n                      gridRow: square.row,\n                      gridColumn: square.col\n                    }}\n                  >\n                    {square.number}\n                  </div>\n            ))\n          }\n          {\n            playersPositions.map((position, index) => (\n              <div\n                key={index}\n                style={{\n                  gridRow: position.row,\n                  gridColumn: position.col\n                }}\n                className={\n                  players[index].number === 1 ?\n                    'first-pawn-on-board'\n                    :\n                    'second-pawn-on-board'\n                }\n              >\n                <img\n                  src={`./pawns/${players[index].pawnColor}-pawn.png`}\n                  alt={`${players[index].pawnColor}-pawn`}\n                />\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Board\n","import React from 'react'\n\nconst Dice = props => {\n  return (\n    <div\n      className='dice'\n    >\n      {props.rolledNumber}\n    </div>\n  )\n}\n\nexport default Dice\n","import React from 'react'\n\nconst Winner = ({ winner, onClickHandler }) => {\n  const rolledMeshes = winner.rolledMeshes\n  const averageOfMeshes = (rolledMeshes.reduce((prevVal, curVal) => prevVal + curVal) / rolledMeshes.length).toFixed(0)\n\n  return (\n    <div className='winner-box'>\n      <img src='./crown/winners_crown.png' alt='winners-crown' />\n      <h1>The crown goes to player {winner.number}!</h1>\n      <div\n        className='winner-pawn'\n      >\n        <img\n          src={`./pawns/${winner.pawnColor}-pawn.png`}\n          alt={`${winner.pawnColor}-pawn`}\n        />\n      </div>\n      <h3>Number of throws: {winner.rolledMeshes.length}</h3>\n      <h3>Average of thrown meshes: {averageOfMeshes}</h3>\n      <button\n        className='start-button'\n        onClick={onClickHandler}\n      >\n        play again\n      </button>\n    </div>\n  )\n}\n\nexport default Winner\n","import React from 'react'\n\nimport MUISnackBar from '@material-ui/core/Snackbar'\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\n\nconst SnackBar = ({ innerText, open, color, handleClose }) => {\n  return (\n    <MUISnackBar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'center',\n      }}\n      open={open}\n      autoHideDuration={2000}\n      onClose={handleClose}\n    >\n      <SnackbarContent\n        style={{ backgroundColor: color }}\n        message={innerText}\n      />\n    </MUISnackBar>\n  )\n}\n\nexport default SnackBar\n","import React from 'react'\n\nimport PlayerSelect from './containers/PlayerSelect'\nimport Board from './containers/Board'\nimport Dice from './components/Dice'\nimport Winner from '../src/containers/Winner'\nimport SnackBar from './components/SnackBar'\n\nclass Game extends React.Component {\n\n  state = {\n    players: [],\n    gameStarted: false,\n    currentPlayer: {},\n    rolledNumber: Math.ceil(Math.random() * 6),\n    isWinner: {},\n    snackbar: {\n      innerText: '',\n      open: false,\n      color: 'red'\n    }\n  }\n\n  gameStart = (players) => {\n    const currentPlayer = players.find(player => player.number === 1)\n\n    this.setState({\n      players,\n      currentPlayer,\n      gameStarted: true\n    })\n  }\n\n  rollTheDice = () => {\n    const { currentPlayer, snackbar } = this.state\n    const rolledNumber = Math.ceil(Math.random() * 6)\n    const players = this.state.players.map(player => {\n\n      if (player.number === currentPlayer.number) {\n        const rolledMeshes = player.rolledMeshes\n        rolledMeshes.push(rolledNumber)\n\n        let updatedPosition = (player.position + rolledNumber) > 20 ?\n          20 - (player.position + rolledNumber - 20)\n          :\n          player.position + rolledNumber\n\n        if (updatedPosition === 19) {\n          updatedPosition = 11\n          this.setState({\n            snackbar: {\n              ...snackbar,\n              innerText: `Player ${currentPlayer.number} moved back to eleven.`,\n              open: true\n            }\n          })\n        }\n        if (updatedPosition === 12) {\n          const winner = this.state.players.find(player => player.number !== currentPlayer.number)\n          this.setState({\n            snackbar: {\n              ...snackbar,\n              innerText: `Player ${currentPlayer.number} lost !`,\n              open: true\n            }\n          }, () => setTimeout(() => {\n            this.setState({ isWinner: winner })\n          }, 2000))\n        }\n\n        player = {\n          ...player,\n          position: updatedPosition,\n          rolledMeshes\n        }\n      }\n      return player\n    })\n\n    const secondPlayer = players.find(player => player.number !== currentPlayer.number)\n    this.setState({\n      players,\n      currentPlayer: secondPlayer,\n      rolledNumber\n    }, () => {\n      const isWinner = players.some(player => player.position === 20)\n      if (isWinner) {\n        this.setState({\n          snackbar: {\n            innerText: `Player ${currentPlayer.number} wins!`,\n            open: true,\n            color: 'green'\n          }\n        }, () => setTimeout(() => {\n          this.setState({ isWinner: currentPlayer })\n        }, 2000))\n      }\n    })\n  }\n\n  closeSnackBar = () => {\n    this.setState({\n      snackbar: {\n        innerText: '',\n        open: false,\n        color: 'red'\n      }\n    })\n  }\n\n  playAgain = () => {\n    this.setState({\n      players: [],\n      gameStarted: false,\n      currentPlayer: {},\n      rolledNumber: Math.ceil(Math.random() * 6),\n      isWinner: {},\n      snackbar: {\n        innerText: '',\n        open: false,\n        color: 'red'\n      }\n    })\n  }\n\n  render() {\n    const { players, gameStarted, currentPlayer, rolledNumber, isWinner, snackbar } = this.state\n\n    return (\n      isWinner.position ?\n        <Winner\n          winner={isWinner}\n          onClickHandler={this.playAgain}\n        />\n        :\n        <div\n          className='game-container'\n        >\n          {\n            gameStarted ?\n              <div>\n                <Board\n                  players={players}\n                  currentPlayer={currentPlayer}\n                  rolledNumber={rolledNumber}\n                />\n                <div\n                  className='players-info-box'\n                >\n                  <SnackBar\n                    innerText={snackbar.innerText}\n                    open={snackbar.open}\n                    handleClose={this.closeSnackBar}\n                    color={snackbar.color}\n                  />\n                  <div\n                    className='dice-box'\n                  >\n                    <button\n                      disabled={snackbar.open ? true : false}\n                      className=\"roll-button\"\n                      onClick={this.rollTheDice}\n                    >\n                      Roll!\n                  </button>\n                    <Dice\n                      rolledNumber={rolledNumber}\n                    />\n                  </div>\n                  <div\n                    className='moves-now'\n                  >\n                    <h2 style={{ marginBottom: 0 }}>Rolls now :</h2>\n                    <div\n                      className='player-info'\n                    >\n                      {players.map(player => (\n                        <div\n                          key={player.number}\n                        >\n                          <h3\n                            className={\n                              player.number === currentPlayer.number ?\n                                'player-number-large'\n                                :\n                                'player-number-small'\n                            }\n                          >\n                            Player {player.number}\n                          </h3>\n                          <img\n                            className={\n                              player.number === currentPlayer.number ?\n                                'pawn-image-large'\n                                :\n                                'pawn-image-small'\n                            }\n                            src={`./pawns/${player.pawnColor}-pawn.png`}\n                            alt={`${player.pawnColor}-pawn`}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              :\n              <PlayerSelect gameStart={this.gameStart} />\n          }\n        </div>\n    );\n  }\n}\n\nexport default Game\n","import React from 'react'\n\nimport Game from './Game'\nimport './App.css'\n\n\nconst App = (props) => {\n  return (\n    <div\n      className={\n        document.body.clientWidth < 500 ?\n          'App-mobile'\n          :\n          document.body.clientWidth < 950 ?\n            'App-tablets'\n            :\n            'App'\n      }\n    >\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n)\n\n"],"sourceRoot":""}